Gerrit和git的流程

0、资源：

公司git服务器(项目testing):
ssh://git@git.bitcomm.cn:2203/testing.git
公司gerrit评审系统：
http://review.openstack.org

参考资料：

pro git中文版, 最好的git书籍
http://git-scm.com/book/zh
图解git
http://marklodato.github.com/visual-git-guide/index-zh-cn.html
git交互式学习
http://try.github.com/levels/1/challenges/1
Git分支管理策略
http://blog.jobbole.com/23398/
http://wiki.typo3.org/Git_Gerrit

gerrit 的参考：
http://www.slideshare.net/lucamilanesio/gerrit-code-review
http://qt-project.org/wiki/Gerrit-Introduction
http://wiki.typo3.org/Contribution_Walkthrough_with_CommandLine
http://wiki.whamcloud.com/display/PUB/Using+Gerrit
http://wiki.openstack.org/GerritWorkflow
http://wiki.openstack.org/GerritJenkinsGithub
http://www.itk.org/Wiki/ITK/Git/Develop#Create_a_Topic
http://openstack-ci.github.com/publications/jenkins/
http://source.android.com/source/life-of-a-patch.html
http://www.infoq.com/cn/articles/Gerrit-jenkins-hudson

1、注册帐号

在 http://review.bitcomm.cn 注册用户，采用的是openid，直接使用公司的google邮箱就可以了。

注册的时候，注意:

-- 设置自己的用户名，这个后面授权需要用到，比如我选择的是 refactor
-- 导入自己的公钥，这个在 git 进行 review操作的时候，授权需要用到

注册完了以后，可以看到 testing 项目，其余的项目，联系项目经理进行授权，将下面的信息发送给项目经理：

注册的邮箱、ssh公钥和对应的项目


2、工具

由于目前git的命令行功能和稳定性比图形界面的egit等强，大家在代码递交时，还是使用Windows或者Linux的命令行，windows下可以采用：

http://msysgit.github.com


3、导出项目，进行设置

配置递交代码人信息：
git config --global user.name "Peng Yong"
git config --global user.email ppyy@pubyun.com

从git取出代码：
git clone ssh://git@git.bitcomm.cn:2203/testing.git
注意选用自己需要的项目名称替代 testing

加入 review 评审代码的地址:
git remote add review ssh://refactor@review.bitcomm.cn:29418/testing.git
scp -P 29418 refactor@review.bitcomm.cn:hooks/commit-msg .git/hooks/

注意:
选用自己需要的项目名称替代 testing
使用自己的用户名替代 refactor

4、日常的流程，需要修改一个bug，或者开发新功能时：

获取最新的代码：

git remote update
git checkout master
git pull origin master

每一个开发（bug，feature），都创建一个分支，不要在 master上做，做完以后，递交评审，如果通过，自动合并到master分支：

git checkout -b bug/typefix
git checkout -b feature/login_module


修改代码，然后递交：
git commit –a
注意写好递交日志。

上传代码，等待评审：
git push review HEAD:refs/for/master


5、如果评审不通过，需要再次修改代码，则继续在原来的分支修改代码：

git checkout bug/typefix
修改代码…

然后递交（注意，一定使用 amend选项，这样可以继续递交在原来的review单号上）

git commit -a --amend
git push review HEAD:refs/for/master

如果代码审查通过，合并完成以后，可以删除这个分支：

git branch -d fix/type

6. 审批通过以后，gerrit提示有冲突怎么办
http://unethicalblogger.com/2010/04/02/a-rebase-based-workflow.html
http://www.mediawiki.org/wiki/Gerrit/resolve_conflict

冲突产生，是由于两个开发人员，修改了同一个文件。解决办法:

git fetch origin
git rebase origin/master

git合并能力很强，一般的冲突上面可以自动解决了。如果冲突在同一个地方，需要手工解决。这个情况，请联系资深工程师帮助一起解决。需要用编辑器修改相应文件, 然后标志这个文件冲突解决，继续rebase：

git add file_modified
git rebase --continue

如果有多个文件同时冲突，需要运行上述命令多次。然后递交审查：

git commit -a --amend
git push review HEAD:refs/for/master

7、其他事项

7.1 版本管理规则

7.1.1 一般线上运行的系统，只采用一个 master 主线的方式进行管理。

也就是开发人员的代码，通过评审以后，直接merge到master分支；master分支也是生产机上运行的代码。这就要求有质量控制过程，防止错误导致系统的严重错误。

-- 递交的代码，要是一个原子操作，具有高内聚性，即一次递交的所有代码完成且仅完成一个功能，联系紧密，缺一不可
-- 递交的代码，要具有上线标准，要是一个可运行的合格的代码
-- 评审一般都必须至少一个以上的人评审过，最好是同组的开发人员评审，项目经理或者资深开发人员审批。评审的过程，也是结对编程的思想，可以互相熟悉代码，互相学习提高，便于统一代码风格，提高代码质量。

7.1.2 如果一个 feature 是一个需要较长时间开发，比如增加一个短信验证的功能，需要一周时间，则在自己的这个开发分支内，可以采取小步快跑的方式不断递交到本地的git。在开发完成以后，在上传到 review服务器进行评审前，需要使用 rebase 命令，将这些多次递交适当进行合并然后上传。

记住，每一次递交在Gerrit评审服务器上，都必须要单独评审审批，如果一个功能有很多小的修改组成，这些小的修改可以适当合并，具体方法是：

git checkout master
git pull origin master
git checkout your-feature-branch
git rebase -i master

7.1.3 如果需要进行改版，会延续几个月的大量改进，则需要在 gerrit 评审系统内创建新的开发分支，比如devel分支，而不使用 master 进行管理，以便进行代码的隔离。改版完成以后，将代码从develp合并到master分支。

这时，改版递交代码和评审，都在develop分支进行，上传命令采用；

git push review HEAD:refs/for/develop

生产机上任然使用 master分支。 这时，一般性的功能改进和bug修正，任然递交到 master 分支。并且定时从 master merge到develop分支，以便减少冲突，降低以后 develop合并到 master的难度。

7.2 获取临时的代码
如果其他人将代码上传到gerrit，但是还没有评审通过，这时，可以采用下面方法获取这个代码(每个评审单后都有链接)：

git fetch ssh://refactor@review.bitcomm.cn:29418/testing refs/changes/07/7/1 && git checkout FETCH_HEAD

7.3 获取通知邮件
对于关注的项目，可以获取通知邮件，方法是选择菜单：

Settings - Watched Projects

然后使用 Browse 按钮选择响应的项目，然后选择“Email Notifications”的类型，一般全部打勾

7.4 gerrit评审系统的键盘快捷键
gerrit是google开发的软件，同样支持Google风格的快捷键，类似Gmail的风格。使用快捷键，可以提高阅读和评审的速度。使用问号 "?" 可以寻求快捷键的帮助。


8、FAQ
8.1 提示"Missing Change-Id in commit message"
这是由于没有下载hook, 生成Change-Id。这个Change-ID是gerrit一个必须的重要标志，多次修改同一个问题的时候，会对应到一个单子。解决方法。

scp -P 29418 refactor@review.bitcomm.cn:hooks/commit-msg .git/hooks/

然后再次递交：
git commit -a --amend
git push origin HEAD:refs/for/master

8.2 Backporting a change to other branches
http://wiki.typo3.org/Contribution_Walkthrough_with_CommandLine
比如，一个master分支，一个release分支，递交进入master的分支中，有某个bugfix或者新特性需要合并回release分支：

git fetch --all
git checkout -b rfc/4-4/1234 origin/<release-branch>
git cherry-pick <revision-id>
去掉Change-Id, Reviewed-*, Tested-by等日志信息
git commit -a --amend
git push origin HEAD:refs/for/<release-branch>

9、一些场景
9.1 前端工程师如何递交代码？
如果和程序员一起配合做一个功能，那么将代码交给程序员，开发、测试以后，一起作为一个原子操作递交。

如果是前端修改一个错误或者改进，不需要和程序员配合，则直接递交。

